- include_tasks: "{{ stage }}_iam.yml"

# There is a chicken egg situation between using deployment jobs
# that create the zip file, upload and update the lambda (which
# don't work if the lambda doesn't exist) and the lambda creation
# (which doesn't work if the zip file doesn't exist). So we'll use
# a dummy one
- name: check if zip file exists
  aws_s3:
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
    bucket: "{{ s3_buckets['c-infra-build'].name }}"
    object: "{{ lambda_function_name }}.zip"
    mode: geturl
  failed_when: false
  register: s3_zip_file_result

- name: upload trivial zip
  aws_s3:
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
    bucket: "{{ s3_buckets['c-infra-build'].name }}"
    object: "{{ lambda_function_name }}.zip"
    mode: put
    src: trivial.zip
  when: "'url' not in s3_zip_file_result"

- name: Update ecs event monitor lambda
  lambda:
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
    name: "{{ ecs_cluster }}-{{ lambda_function_name }}"
    state: "{{ 'present' if stage == 'create' else 'absent' }}"
    s3_bucket: "{{ s3_buckets['c-infra-build'].name }}"
    s3_key: "{{ lambda_function_name }}.zip"
    runtime: python3.6
    role: "ecs-event-monitor"
    handler: "{{ lambda_function_name }}.lambda_handler"
    timeout: 30
    environment_variables:
      AUTOSCALINGGROUP: "{{ asg_name }}"
      ECS_CLUSTER: "{{ ecs_cluster }}"
  register: ecs_event_monitor_lambda

- name: Update the cloudwatch event to use with ECS Event monitor Lambda
  cloudwatchevent_rule:
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
    name: "{{ ecs_cluster }}-ecs-event-monitor-rule"
    description: "Monitor ECS events for {{ ecs_cluster }} cluster"
    targets:
      - id: "{{ ecs_event_monitor_lambda.configuration.function_name }}"
        arn: "{{ ecs_event_monitor_lambda.configuration.function_arn }}"
    event_pattern: "{{ ecs_event_pattern | to_json }}"
    state: present
  register: cloudwatch_aws_event

- name: create lambda policy to allow aws events to invoke it
  lambda_policy:
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
    state: present
    function_name: "{{ ecs_event_monitor_lambda.configuration.function_name }}"
    statement_id: "{{ ecs_event_monitor_lambda.configuration.function_name }}"
    action: "lambda:InvokeFunction"
    principal: events.amazonaws.com
    source_arn: "{{ cloudwatch_aws_event.rule.arn }}"
